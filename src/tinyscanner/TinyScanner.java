/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tinyscanner;


import javax.swing.table.*;

/**
 *
 * @author shaza
 */
 
public class TinyScanner extends javax.swing.JFrame {

    //public DefaultTableModel model = new DefaultTableModel(); 
    /**
     * Creates new form MainWindow
     */
    public TinyScanner() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        codeArea = new javax.swing.JTextArea();
        scanButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tokenTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        codeArea.setColumns(20);
        codeArea.setRows(5);
        jScrollPane1.setViewportView(codeArea);

        scanButton.setText("Scan Code");
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Write Your Tiny program here:");

        tokenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token Value", "Token Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tokenTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(scanButton)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scanButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    
    
    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        // TODO add your handling code here:
        /*
        have some index and call getNextToken till the index reaches 
        the text Area text length
        */
        int[] i = {0}; 
        String code = codeArea.getText();
        int length = code.length();
        
        DefaultTableModel model = (DefaultTableModel)tokenTable.getModel();
        model.setRowCount(0);
        while(i[0] < length)
        {
            ValueTypePair nextToken = getNextToken(i,code.substring(i[0]));    
            //Object[] row = {nextToken.getTokenValue(),nextToken.getTokenType()};
            model.addRow(new Object[]{nextToken.getTokenValue(),nextToken.getTokenType()}); 
            
        }
    }//GEN-LAST:event_scanButtonActionPerformed

    private ValueTypePair getNextToken(int[] index, String remCode)
    {
        Token next = Token.START;
        
        String token = "";
        String type = "";
        int tokenLength = 0;
        int remLength = remCode.length();
        while(tokenLength < remLength)
        {
            char charToCheck = remCode.charAt(tokenLength);
            switch (next)
            {
                case START:
                    if(Character.isLetter(charToCheck))
                    {
                        next = Token.IDENTIFIER;
                        token = Character.toString(charToCheck);
                        type = "Identifier";
                        tokenLength +=1;
                    }
                    else if(Character.isDigit(charToCheck))
                    {
                        next = Token.NUMBER;
                        token = Character.toString(charToCheck);
                        type = "Number";
                        tokenLength +=1;
                    }
                    else if(Character.isSpaceChar(charToCheck))
                    {
                        next = Token.START;
                        tokenLength +=1;
                    }
                    else if(charToCheck == '{')
                    {
                        next = Token.COMMENT;
                        tokenLength +=1;
                    }
                    else if(charToCheck == ':')
                    {
                        next = Token.ASSIGN;
                        tokenLength +=1;
                        token = Character.toString(charToCheck);
                        type = "Assignment";
                    }
                    else if(charToCheck == '+')
                    {
                        next = Token.DONE;
                        tokenLength +=1;
                        token = Character.toString(charToCheck);
                        type = "PLUS";
                    }
                    break;
                case IDENTIFIER:
                    if(Character.isLetter(charToCheck))
                    {
                        next = Token.IDENTIFIER;
                        tokenLength +=1;
                        token = token + Character.toString(charToCheck);
                    }
                    else
                    {
                        next = Token.DONE;
                    }
                    break;
                case NUMBER:
                    if(Character.isDigit(charToCheck))
                    {
                        next = Token.NUMBER;
                        tokenLength +=1;
                        token = token + Character.toString(charToCheck);
                    }
                    else
                    {
                        next = Token.DONE;
                    }
                    break;
                case ASSIGN:
                    if(charToCheck == '=')
                    {
                        next = Token.DONE;
                        tokenLength +=1;
                        token = token + Character.toString(charToCheck);
                    }
                    break;
                case COMMENT:
                    if(charToCheck == '}')
                    {
                        next = Token.DONE;
                    }
                    tokenLength +=1;
                    break;
                case DONE:
                    index[0] = index[0] + tokenLength;
                    return new ValueTypePair(token,type);
                
                default:
                    break;
            }
            
        }
        
        return new ValueTypePair(token,type);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TinyScanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TinyScanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TinyScanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TinyScanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TinyScanner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea codeArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton scanButton;
    private javax.swing.JTable tokenTable;
    // End of variables declaration//GEN-END:variables
}
